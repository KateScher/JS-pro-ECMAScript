// Привязка контекста

// Объект Roomba - робот-пылесос. Код самого объекта в листинге 1.

// Обращение к свойства объекта.
console.log(Roomba.model); // "Roomba-1"
console.log(Roomba.isFull); // false

// Вызов методов объекта. SetTimeout - метод задержки времени
// Мы можем вызвать функцию не в данный момент, а позже, через заданный интервал времени. Это называется «планирование вызова».
// Для этого существуют два метода:
// setTimeout позволяет вызвать функцию один раз через определённый интервал времени.
// setInterval позволяет вызывать функцию регулярно, повторяя вызов через определённый интервал времени.
setTimeout(Roomba.startCleaning, 1000);

// Установим свойства объекта isUVLampOn в true, чтобы продемонстрировать результат работы метода switchUVLamp.
Roomba.isUVLampOn = true;

// Результат вызова следующего метода зависит от значения, хранящегося в свойстве объекта, а также от ттго как этот метод был вызван.
setTimeout(Roomba.switchUVLamp, 2000);

setTimeout(Roomba.goCharge, 3000);

// I am cleaning... I have started: NaN times. - вот здесь js 'запутался', время не выдал, как это исправить? Создадим анонимную функцию (см.ниже)
// UV lamp is working.
// I am going to charge...

///////
// Вызов метода объекта будем осуществлять через функции

console.log(Roomba.model); // "Roomba-1"
console.log(Roomba.isFull); // false

// Вызов методов объекта (Вызов анонимной функции)
setTimeout(function () {
  Roomba.startCleaning();
}, 1000);
// Установим свойства объекта isUVLampOn в true, чтобы продемонстрировать результат работы метода switchUVLamp.
Roomba.isUVLampOn = true;
// Результат вызова следующего метода зависит от значения, хранящегося в свойстве объекта, а также от того как этот метод был вызван.
setTimeout(function () {
  Roomba.switchUVLamp();
}, 2000);

setTimeout(function () {
  Roomba.goCharge();
}, 3000);

// I am cleaning... I have started: 1 times.
// UV lamp is not working.
// I am going to charge...
// Итак, в данном случае м ы подсказали js, что надо обращаться не к глобальному объекту
// Но в глобальном масштабе и это решение вопроса при помощи анонимных функций, также является 'костыльным'.
// Решение проблемы - использовать call, apply и bind (см.файл call)
